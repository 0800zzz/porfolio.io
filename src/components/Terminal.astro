---
const CMDS = [
  "nmap -sV -sC 10.10.154.180",
  "hydra -l admin -P rockyou.txt ssh://10.10.154.180",
  "gobuster dir -u http://target -w /usr/share/wordlists/dirb/common.txt",
  "sqlmap -u 'http://target/login.php?id=1' --dbs",
  "curl -I http://10.10.154.180"
];
const OUTPUTS: Record<string, string> = {
  "nmap -sV -sC 10.10.154.180": `Nmap scan report for 10.10.154.180
Host is up (0.23s latency).
Not shown: 996 filtered ports
PORT     STATE SERVICE    VERSION
22/tcp   open  ssh        OpenSSH 7.6p1 Ubuntu
80/tcp   open  http       Apache httpd 2.4.29
443/tcp  open  ssl/http   Apache httpd 2.4.29
8080/tcp open  http-proxy`,
  "hydra -l admin -P rockyou.txt ssh://10.10.154.180": `[SUCCESS] ... user "admin" password "admin123"`,
  "gobuster dir -u http://target -w /usr/share/wordlists/dirb/common.txt": `/admin (301) /login (200) /uploads (301)`,
  "sqlmap -u 'http://target/login.php?id=1' --dbs": `[CRITICAL] parameter 'id' vulnerable. Databases: information_schema, mysql, webapp_db`,
  "curl -I http://10.10.154.180": `HTTP/1.1 200 OK
Server: Apache/2.4.29 (Ubuntu)`
};
---
<div class="mx-auto my-8 w-full max-w-4xl">
  <div class="rounded-lg border border-emerald-400/50 bg-black/95 shadow-[0_0_15px_rgba(0,255,136,.25)]">
    <pre class="m-0 h-64 overflow-auto p-4 font-mono text-emerald-400 text-xs leading-relaxed" id="terminal-container">
# MARTINAL :: Interactive Pentest Shell
<span id="terminal-output"></span><span class="cursor" id="terminal-cursor">â–ˆ</span>
    </pre>
  </div>
</div>
<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const output = document.getElementById('terminal-output');
    const cursor = document.getElementById('terminal-cursor');
    if (!output || !cursor) return;
    let iCmd = 0, step = 'typing', idx = 0;
    function loop(){
      const cmd = CMDS[iCmd];
      if (step === 'typing') {
        output.innerText = `$ ${cmd.substring(0, idx)}`;
        if (idx < cmd.length) { idx++; setTimeout(loop, 40); }
        else { step='output'; idx=0; setTimeout(loop, 600); }
      } else if (step === 'output') {
        const lines = OUTPUTS[cmd].split('\n');
        if (idx < lines.length) {
          output.innerText = `$ ${cmd}\n` + lines.slice(0, idx+1).join('\n');
          idx++; setTimeout(loop, 80);
        } else { step='next'; setTimeout(loop, 1600); }
      } else {
        iCmd = (iCmd + 1) % CMDS.length;
        step = 'typing'; idx = 0; output.innerText = '';
        setTimeout(loop, 400);
      }
    }
    setTimeout(loop, 600);
  });
</script>
<style>
.cursor { animation: blink 1s steps(1,end) infinite; color: #00ff88; }
@keyframes blink { 0%,100%{opacity:1} 50%{opacity:0} }
</style>
